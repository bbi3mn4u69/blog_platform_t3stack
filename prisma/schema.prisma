// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

// user model
model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    posts         Post[]
    comments      Comment[]
    intro         Intro?
    likes         Like[]
    sessions      Session[]
    bookmarks     Bookmark[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// user post
model Post {
    id          String     @id @default(cuid())
    slug        String     @default(cuid())
    authorImage String
    author      String
    title       String?
    postContent String?
    createdById String
    createdBy   User       @relation(fields: [createdById], references: [id])
    key         String?
    createdAt   DateTime   @default(now())
    tags        Tag[]
    comments    Comment[]
    likes       Like[]
    bookmarks   Bookmark[]

    @@unique([key, slug])
}

model Intro {
    id           Int      @id @default(autoincrement())
    userId       String
    userIntro    String?
    introPicture String?
    createdBy    User     @relation(fields: [userId], references: [id])
    createdAt    DateTime @default(now())

    @@unique([userId])
}

model Tag {
    id          String   @id @default(cuid())
    name        String
    description String?
    slug        String
    createdAt   DateTime @default(now())
    post        Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    userId    String
    postId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Bookmark {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}
